(setq-default anything-c-adaptive-history-file "~/.emacs.d/cache/anything-c-adaptive-history")
(require 'anything-startup)
;;{{{ setq 

(setq anything-idle-delay 0.3)
(setq anything-input-idle-delay 0)
(setq anything-candidate-number-limit 100)
(setq  anything-su-or-sudo "sudo")
;;{{{ anything 数字前缀绑定(cancel)

;;如M-x后,按下C-l 然后就可以用a-z0-9的数字选中某个选项
;;(setq anything-enable-shortcuts 'prefix)
;; (setq anything-enable-shortcuts t)
;; (define-key anything-map "\C-l" 'anything-select-with-prefix-shortcut)
;; ;;也可以不必按下"C-l"使用以下键
;; (define-key anything-map (kbd "M-1") 'anything-select-with-digit-shortcut)
;; (define-key anything-map (kbd "M-2") 'anything-select-with-digit-shortcut)
;; (define-key anything-map (kbd "M-3") 'anything-select-with-digit-shortcut)
;; (define-key anything-map (kbd "M-4") 'anything-select-with-digit-shortcut)
;; (define-key anything-map (kbd "M-5") 'anything-select-with-digit-shortcut)
;; (define-key anything-map (kbd "M-6") 'anything-select-with-digit-shortcut)
;; (define-key anything-map (kbd "M-7") 'anything-select-with-digit-shortcut)
;; (define-key anything-map (kbd "M-8") 'anything-select-with-digit-shortcut)
;; (define-key anything-map (kbd "M-9") 'anything-select-with-digit-shortcut)

;;}}}


(anything-dired-bindings 1);;
(setq  anything-c-boring-buffer-regexp
  (rx (or
       (group bos  " ")
       ;; anything-buffer
       "*anything"
       ;; echo area
       " *Echo Area" " *Minibuf"
       " *"
       "*Completions*"
       "*Ibuffer*"
       )))

;;}}}
;;{{{ other anything sources 

;; (install-elisp "http://svn.coderepos.org/share/lang/elisp/anything-c-yasnippet/anything-c-yasnippet.el")
;;(require 'anything-c-yasnippet)         ;[2008/03/25]
;; (install-elisp "http://www4.atpages.jp/loveloveelisp/anything-c-source-buffers2.el")
;; (require 'anything-c-source-buffers2)
;; (setq anything-c-buffer-ignore-regexp-list '(anything-buffer "*Completions*" ))

;; If you want to create anything sources, yasnippet would help you.
;; http://yasnippet.googlecode.com/
;; Then get the snippet from
;; http://www.emacswiki.org/cgi-bin/wiki/download/anything-source.yasnippet
;; Put it in ~/.emacs.d/plugins/yasnippet/snippets/text-mode/emacs-lisp-mode/

;;}}}
;;{{{ 自动生成一个anything命令
;;Migrate `anything-sources' to my-anything command")
;;生成一个自已的anything-your-command ,只需要把你的source 加入到anything-sources
;;如:
;;(setq anything-sources '(anything-etags-c-source-etags-select ))
;;然后运行 `anything-migrate-sources',就会生成一个my-anything的函数,
;;然后把它复制到启动文件中就可以与相应的快捷键绑定,别忘了恢复anything-sources到原来的绑定
;;其实`anything' 命令默认使用anything-sources ,它存在的目的只是一个演示
;; (defun my-anything ()
;;   "Anything command for you.
;; It is automatically generated by `anything-migrate-sources'."
;;   (interactive)
;;   (anything-other-buffer
;;     '(anything-etags-c-source-etags-select)
;;     "*my-anything*"))
;;}}}

;;{{{ my key bindings 

;;(define-prefix-command 'ctl-w-map)
;;(global-set-key (kbd "C-w") 'ctl-w-map)
;;(anything-set-anything-command-map-prefix-key 'anything-command-map-prefix-key "\C-w")
(define-key ctl-x-map (kbd "c") 'anything-buffers+)
(define-key global-map (kbd "M-y") 'anything-show-kill-ring)
;;在firefox里 about:config修改下面的值为true后就可以在emacs里打开firefox书签里的内容
;; user_pref("browser.bookmarks.autoExportHTML", true);
(define-key ctl-w-map (kbd "b") 'anything-firefox-bookmarks)
(define-key ctl-w-map (kbd "x") 'anything-M-x)
;;do grep in selected file or dir 
(define-key ctl-w-map (kbd "g") 'anything-do-grep)
;;list matched regexp in current buffer
(define-key ctl-w-map (kbd "C-s") 'anything-occur)
;;do query-replace 
(define-key ctl-w-map (kbd "r") 'anything-regexp)

(define-key ctl-w-map (kbd "f") 'anything-find-files)
(define-key ctl-w-map (kbd "C-f") 'anything-for-files)
(define-key ctl-w-map (kbd "C-c") 'anything-buffers+)
(define-key ctl-w-map (kbd "C") 'anything-colors)

(define-key ctl-w-map (kbd "C-w") 'anything-write-file)
(define-key ctl-w-map (kbd "<SPC>") 'anything-execute-anything-command)
(define-key ctl-w-map (kbd "l") 'anything-locate)
(define-key ctl-w-map (kbd "C-p") 'anything-list-emacs-process)

;;}}}
;;{{{ default anything key bindings

;; (define-key anything-command-map (kbd "<SPC>") 'anything-execute-anything-command)
;; (define-key anything-command-map (kbd "e") 'anything-c-etags-select)
;; (define-key anything-command-map (kbd "l") 'anything-locate)
;; (define-key anything-command-map (kbd "s") 'anything-surfraw)
;; (define-key anything-command-map (kbd "r") 'anything-regexp)
;; (define-key anything-command-map (kbd "w") 'anything-w3m-bookmarks)
;; (define-key anything-command-map (kbd "x") 'anything-firefox-bookmarks)
;; (define-key anything-command-map (kbd "#") 'anything-emms)
;; (define-key anything-command-map (kbd "m") 'anything-man-woman)
;; (define-key anything-command-map (kbd "t") 'anything-top)
;; (define-key anything-command-map (kbd "i") 'anything-imenu)
;; (define-key anything-command-map (kbd "p") 'anything-list-emacs-process)
;; (define-key anything-command-map (kbd "C-x r b") 'anything-c-pp-bookmarks)
;; (define-key anything-command-map (kbd "M-y") 'anything-show-kill-ring)
;; (define-key anything-command-map (kbd "C-c <SPC>") 'anything-all-mark-rings)
;; (define-key anything-command-map (kbd "C-x C-f") 'anything-find-files)
;; (define-key anything-command-map (kbd "f") 'anything-for-files)
;; (define-key anything-command-map (kbd "C-:") 'anything-eval-expression-with-eldoc)
;; (define-key anything-command-map (kbd "C-,") 'anything-calcul-expression)
;; (define-key anything-command-map (kbd "M-x") 'anything-M-x)
;; (define-key anything-command-map (kbd "C-x C-w") 'anything-write-file)
;; (define-key anything-command-map (kbd "C-x i") 'anything-insert-file)
;; (define-key anything-command-map (kbd "M-s o") 'anything-occur)
;; (define-key anything-command-map (kbd "M-g s") 'anything-do-grep)
;; (define-key anything-command-map (kbd "c") 'anything-colors)
;; (define-key anything-command-map (kbd "F") 'anything-select-xfont)
;; (define-key anything-command-map (kbd "C-c f") 'anything-recentf)
;; (define-key anything-command-map (kbd "C-c g") 'anything-google-suggest)
;; (define-key anything-command-map (kbd "h i") 'anything-info-at-point)
;; (define-key anything-command-map (kbd "h r") 'anything-info-emacs)
;; (define-key anything-command-map (kbd "C-x C-b") 'anything-buffers+)
;; (define-key anything-command-map (kbd "C-c C-b") 'anything-browse-code)
;; (define-key anything-command-map (kbd "C-x r i") 'anything-register)
;; (define-key anything-command-map (kbd "C-c C-x") 'anything-c-run-external-command)

;;}}}

;;{{{ 在*anything* buffer激活后我的一些键绑定

 ;;在*anything-**buffer里面的键绑定
(define-key anything-map "\C-r" 'anything-previous-page)
(define-key anything-map (kbd "C-j") 'anything-execute-persistent-action);;默认是C-z
(define-key anything-map (kbd "C-f") 'anything-execute-persistent-action)

(define-key anything-map (kbd "C-.") 'anything-previous-source)
(define-key anything-map (kbd "C-o") 'anything-next-source)
(define-key anything-map (kbd "C-,") 'anything-find-files-down-one-level)
;;删除当前选项
(define-key anything-map (kbd "C-d") 'anything-delete-current-selection)

;;}}}
;;{{{  在*anything* buffer激活后默认的键绑定  
;; (defvar anything-map
;;   (let ((map (copy-keymap minibuffer-local-map)))
;;     (define-key map (kbd "<down>") 'anything-next-line)
;;     (define-key map (kbd "<up>") 'anything-previous-line)
;;     (define-key map (kbd "C-n")     'anything-next-line)
;;     (define-key map (kbd "C-p")     'anything-previous-line)
;;     (define-key map (kbd "<prior>") 'anything-previous-page)
;;     (define-key map (kbd "<next>") 'anything-next-page)
;;     (define-key map (kbd "M-v")     'anything-previous-page)
;;     (define-key map (kbd "C-v")     'anything-next-page)
;;     (define-key map (kbd "M-<")     'anything-beginning-of-buffer)
;;     (define-key map (kbd "M->")     'anything-end-of-buffer)
;;     (define-key map (kbd "<right>") 'anything-next-source)
;;     (define-key map (kbd "<left>") 'anything-previous-source)
;;     (define-key map (kbd "<RET>") 'anything-exit-minibuffer)
;;     (define-key map (kbd "C-1") 'anything-select-with-digit-shortcut)
;;     (define-key map (kbd "C-2") 'anything-select-with-digit-shortcut)
;;     (define-key map (kbd "C-3") 'anything-select-with-digit-shortcut)
;;     (define-key map (kbd "C-4") 'anything-select-with-digit-shortcut)
;;     (define-key map (kbd "C-5") 'anything-select-with-digit-shortcut)
;;     (define-key map (kbd "C-6") 'anything-select-with-digit-shortcut)
;;     (define-key map (kbd "C-7") 'anything-select-with-digit-shortcut)
;;     (define-key map (kbd "C-8") 'anything-select-with-digit-shortcut)
;;     (define-key map (kbd "C-9") 'anything-select-with-digit-shortcut)
;;     (loop for c from ?A to ?Z do
;;           (define-key map (make-string 1 c) 'anything-select-with-digit-shortcut))
;;     (define-key map (kbd "C-i") 'anything-select-action)
;;     (define-key map (kbd "C-z") 'anything-execute-persistent-action)
;;     (define-key map (kbd "C-e") 'anything-select-2nd-action-or-end-of-line)
;;     (define-key map (kbd "C-j") 'anything-select-3rd-action)
;;     (define-key map (kbd "C-o") 'anything-next-source)
;;     (define-key map (kbd "C-M-v") 'anything-scroll-other-window)
;;     (define-key map (kbd "M-<next>") 'anything-scroll-other-window)
;;     (define-key map (kbd "C-M-y") 'anything-scroll-other-window-down)
;;     (define-key map (kbd "C-M-S-v") 'anything-scroll-other-window-down)
;;     (define-key map (kbd "M-<prior>") 'anything-scroll-other-window-down)
;;     (define-key map (kbd "C-SPC") 'anything-toggle-visible-mark)
;;     (define-key map (kbd "M-[") 'anything-prev-visible-mark)
;;     (define-key map (kbd "M-]") 'anything-next-visible-mark)
;;     (define-key map (kbd "C-k") 'anything-delete-minibuffer-contents)

;;     (define-key map (kbd "C-s") 'anything-isearch)
;;     (define-key map (kbd "C-r") 'undefined)
;;     (define-key map (kbd "C-t") 'anything-toggle-resplit-window)
;;     (define-key map (kbd "C-x C-f") 'anything-quit-and-find-file)

;;     (define-key map (kbd "C-c C-d") 'anything-delete-current-selection)
;;     (define-key map (kbd "C-c C-y") 'anything-yank-selection)
;;     (define-key map (kbd "C-c C-k") 'anything-kill-selection-and-quit)
;;     (define-key map (kbd "C-c C-f") 'anything-follow-mode)
;;     (define-key map (kbd "C-c C-u") 'anything-force-update)

;;     ;; Debugging command
;;     (define-key map "\C-c\C-x\C-d" 'anything-debug-output)
;;     (define-key map "\C-c\C-x\C-m" 'anything-display-all-visible-marks)
;;     (define-key map "\C-c\C-x\C-b" 'anything-send-bug-report-from-anything)
;;     ;; Use `describe-mode' key in `global-map'
;;     (dolist (k (where-is-internal 'describe-mode global-map))
;;       (define-key map k 'anything-help))
;;     ;; the defalias is needed because commands are bound by name when
;;     ;; using iswitchb, so only commands having the prefix anything-
;;     ;; get rebound
;;     (defalias 'anything-previous-history-element 'previous-history-element)
;;     (defalias 'anything-next-history-element 'next-history-element)
;;     (define-key map (kbd "M-p") 'anything-previous-history-element)
;;     (define-key map (kbd "M-n") 'anything-next-history-element)
;;     map)
;;   "Keymap for anything.

;; If you execute `anything-iswitchb-setup', some keys are modified.
;; See `anything-iswitchb-setup-keys'.")

;; (defvar anything-isearch-map
;;   (let ((map (make-sparse-keymap)))
;;     (set-keymap-parent map (current-global-map))
;;     (define-key map (kbd "<return>") 'anything-isearch-default-action)
;;     (define-key map (kbd "<RET>") 'anything-isearch-default-action)
;;     (define-key map (kbd "C-i") 'anything-isearch-select-action)
;;     (define-key map (kbd "C-g") 'anything-isearch-cancel)
;;     (define-key map (kbd "M-s") 'anything-isearch-again)
;;     (define-key map (kbd "<backspace>") 'anything-isearch-delete)
;;     ;; add printing chars
;;     (loop for i from 32 below 256 do
;;           (define-key map (vector i) 'anything-isearch-printing-char))
;;     map)
;;   "Keymap for anything incremental search.")

;;}}}
(add-to-list 'anything-for-files-prefered-list 'anything-c-source-create)
(when (equal system-type 'windows-nt)
  (require 'joseph-filelist)
  (add-to-list 'anything-for-files-prefered-list
               'anything-c-source-joseph-filelist))

(provide 'joseph-anything)
